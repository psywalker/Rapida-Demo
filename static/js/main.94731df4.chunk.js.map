{"version":3,"sources":["components/Number/index.js","components/GameFields/GameFieldBig.js","components/GameFields/GameFieldSmall.js","components/GameItems/GameItemField/index.js","components/GameItems/GameItemText/index.js","initialStates/fieldsState.js","components/GameContainer/index.js","App.js","serviceWorker.js","index.js"],"names":["Number","_ref","id","_useState","useState","_useState2","Object","slicedToArray","btnPress","setBtnPress","classBtn","react_default","a","createElement","className","onClick","type","GameFieldBig","bigFieldArr","map","item","components_Number","key","GameFieldSmall","smallFieldArr","GameItemField","GameFields_GameFieldBig","GameFields_GameFieldSmall","GameItemText","fieldSmallState","count","fieldBigState","GameContainer","state","smallFieldCount","Array","from","length","v","k","GameItems_GameItemField","this","GameItems_GameItemText","Component","App","components_GameContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TAoBeA,SAjBA,SAAAC,GAAY,IAATC,EAASD,EAATC,GAASC,EACOC,oBAAS,GADhBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAClBK,EADkBH,EAAA,GACRI,EADQJ,EAAA,GAInBK,EAAWF,EACb,kDACA,wBAEJ,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,UAAQE,QARe,kBAAMN,GAAaD,IAQLQ,KAAK,SAASF,UAAWJ,GAC3DR,MCMMe,QAhBM,SAAAhB,GAAqB,IAAlBiB,EAAkBjB,EAAlBiB,YACtB,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBACZH,EAAAC,EAAAC,cAAA,uCADF,sFAIAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACXI,EAAYC,IAAI,SAAAC,GAAI,OACnBT,EAAAC,EAAAC,cAACQ,EAAD,CAAQnB,GAAIkB,EAAME,IAAKF,UCMlBG,EAfQ,SAAAtB,GAAuB,IAApBuB,EAAoBvB,EAApBuB,cACxB,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBACZH,EAAAC,EAAAC,cAAA,uCADF,sFAGAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACXU,EAAcL,IAAI,SAAAC,GAAI,OACrBT,EAAAC,EAAAC,cAACQ,EAAD,CAAQnB,GAAIkB,EAAME,IAAKF,SCUlBK,QAjBO,SAAAxB,GAAoC,IAAjCiB,EAAiCjB,EAAjCiB,YAAaM,EAAoBvB,EAApBuB,cACpC,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,+BACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,+BAAd,oCACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACbH,EAAAC,EAAAC,cAACa,EAAD,CAAcR,YAAaA,IAC3BP,EAAAC,EAAAC,cAACc,EAAD,CAAgBH,cAAeA,KAGjCb,EAAAC,EAAAC,cAAA,UAAQC,UAAU,2CAAlB,8GCDSc,EAXM,WACnB,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,+BAAd,oCACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,8BAAb,4JCPOe,EAAkB,CAC7BC,MAAO,GAGIC,EAAgB,CAC3BD,MAAO,ICyBME,oNAvBbC,MAAQ,CAAEC,gBAAiB,KAE3BV,cAAgBW,MAAMC,KAAK,CAAEC,OAAQR,EAAgBC,OAAS,SAACQ,EAAGC,GAAJ,QAAYA,MAE1ErB,YAAciB,MAAMC,KAAK,CAAEC,OAAQN,EAAcD,OAAS,SAACQ,EAAGC,GAAJ,QAAYA,4EAGpE,OACE5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAC2B,EAAD,CACEhB,cAAeiB,KAAKjB,cACpBN,YAAauB,KAAKvB,eAGtBP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAC6B,EAAD,eAjBkBC,cCGbC,mLAJX,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,aAFOF,aCSEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.94731df4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./style.scss\";\r\n\r\nconst Number = ({ id }) => {\r\n  const [btnPress, setBtnPress] = useState(false);\r\n  const setItemPressToggle = () => setBtnPress(!btnPress);\r\n\r\n  const classBtn = btnPress\r\n    ? \"game-field-list__btn game-field-list__btn_press\"\r\n    : \"game-field-list__btn \";\r\n\r\n  return (\r\n    <div className=\"game-field-list__item\">\r\n      <button onClick={setItemPressToggle} type=\"button\" className={classBtn}>\r\n        {id}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Number;\r\n","import React from \"react\";\r\nimport Number from \"components/Number\";\r\nimport \"./style.scss\";\r\n\r\nconst GameFieldBig = ({ bigFieldArr }) => {\r\n  return (\r\n    <div className=\"game-field\">\r\n      <h3 className=\"game-field__title\">\r\n        <b>Поле 1</b> отметьте 8 чисел\r\n      </h3>\r\n\r\n      <ul className=\"game-field-list\">\r\n        {bigFieldArr.map(item => (\r\n          <Number id={item} key={item} />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameFieldBig;\r\n","import React from \"react\";\r\nimport Number from \"components/Number\";\r\nimport \"./style.scss\";\r\n\r\nconst GameFieldSmall = ({ smallFieldArr }) => {\r\n  return (\r\n    <div className=\"game-field\">\r\n      <h3 className=\"game-field__title\">\r\n        <b>Поле 2</b> отметьте 2 числа\r\n      </h3>\r\n      <ul className=\"game-field-list\">\r\n        {smallFieldArr.map(item => (\r\n          <Number id={item} key={item} />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameFieldSmall;\r\n","import React from \"react\";\r\nimport GameFieldBig from \"components/GameFields/GameFieldBig\";\r\nimport GameFieldSmall from \"components/GameFields/GameFieldSmall\";\r\nimport \"../style.scss\";\r\n\r\nconst GameItemField = ({ bigFieldArr, smallFieldArr }) => {\r\n  return (\r\n    <div className=\"game-field-container\">\r\n      <i className=\"game-field-container__icon\" />\r\n      <h2 className=\"game-field-container__title\">Билет 1</h2>\r\n      <div className=\"game-field-container__fields\">\r\n        <GameFieldBig bigFieldArr={bigFieldArr} />\r\n        <GameFieldSmall smallFieldArr={smallFieldArr} />\r\n      </div>\r\n\r\n      <button className=\"game-field-container__result result-btn\">\r\n        Показать результат\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameItemField;\r\n","import React from \"react\";\r\nimport \"../style.scss\";\r\n\r\nconst GameItemText = () => {\r\n  return (\r\n    <div className=\"game-field-container\">\r\n      <h2 className=\"game-field-container__title\">Билет 1</h2>\r\n      <p className=\"game-field-container__text\">\r\n        Ого, вы выиграли! Поздравляем!\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameItemText;\r\n","export const fieldSmallState = {\r\n  count: 2\r\n};\r\n\r\nexport const fieldBigState = {\r\n  count: 19\r\n};\r\n","import React, { Component } from \"react\";\r\nimport GameItemField from \"components/GameItems/GameItemField\";\r\nimport GameItemText from \"components/GameItems/GameItemText\";\r\nimport { fieldSmallState, fieldBigState } from \"initialStates/fieldsState\";\r\nimport \"./style.scss\";\r\n\r\nclass GameContainer extends Component {\r\n  state = { smallFieldCount: 0 };\r\n\r\n  smallFieldArr = Array.from({ length: fieldSmallState.count }, (v, k) => ++k);\r\n\r\n  bigFieldArr = Array.from({ length: fieldBigState.count }, (v, k) => ++k);\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game__item\">\r\n          <GameItemField\r\n            smallFieldArr={this.smallFieldArr}\r\n            bigFieldArr={this.bigFieldArr}\r\n          />\r\n        </div>\r\n        <div className=\"game__item\">\r\n          <GameItemText />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GameContainer;\r\n","import React, { Component } from \"react\";\nimport GameContainer from \"components/GameContainer\";\n\nclass App extends Component {\n  render() {\n    return <GameContainer />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}